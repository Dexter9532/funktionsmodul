#define F_CPU 16000000UL
#include <avr/io.h>
#include <stdint.h>


#define pb3 3
#define pb5 5
#define pb2 2


void execute(uint8_t cmd, uint8_t data){

    PORTB &= ~(1<<SS);

    SPDR = cmd;
    while(!(SPSR & (1<<SPIF)));

    SPDR = data;
    while(!(SPSR & (1<<SPIF)));

    PORTB |= (1<<SS);
}


int main(void)
{
    DDRB = (1<<MOSI) | (1<<SCK) | (1<<SS);
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);



    execute(0x09,0b00001111);

    execute(0x0B, 0x03);
    execute(0x0C, 0x01);
    execute(0x01, 0x07);
    execute(0x02, 0x05);
    execute(0x03, 0x07 | (1<<7));
    execute(0x04, 0x05);

    while (1) 
    {
    }
}
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>
#include <avr/interrupt.h>


#define pb3 3
#define pb5 5
#define pb2 2 

uint8_t counter = 0;
uint8_t buttons_pressed, function;

ISR(PCINT2_vect) {
    buttons_pressed = ~PIND; // Läs in knapptryckningar

    switch (buttons_pressed) {
        case 0b00000001: function = 1; break;
        case 0b00000010: function = 2; break;
        case 0b00000100: function = 3; break;
        case 0b00001000: function = 4; break;
    }
}

void ADC_init() {
    ADMUX = (1 << REFS0); // Välj referensspänning AVCC (5V)
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    // Aktivera ADC och sätt prescaler till 128 (16MHz/128 = 125kHz ADC-klocka)
}

uint16_t ADC_read() {
    ADCSRA |= (1 << ADSC); // Starta ADC-konvertering
    while (ADCSRA & (1 << ADSC)); // Vänta tills konvertering är klar
    return ADC; // Returnera 10-bitars ADC-värde (0–1023)
}

float ADC_getVoltage() {
    uint16_t adc_value = ADC_read();
    float voltage = (adc_value * 5.0) / 1023.0; // Beräkna spänning i volt
    return voltage;
}

uint8_t get_random_decimal() {
    uint16_t adc_value = ADC_read(); // Läs ADC (0 - 1023)
    return (adc_value % 4) + 1; // Mappa till 1–4
}
void execute(uint8_t cmd,uint8_t data)
{
    PORTB &= ~(1<<pb2);
    
    SPDR = cmd;
    while(!(SPSR & (1<<SPIF)));
    
    SPDR = data;
    while(!(SPSR & (1<<SPIF)));
    
    PORTB |= (1<<pb2);
}
// SPI-initiering för MAX7221
void spi_init() {

    DDRB = (1<<pb3)|(1<<pb5)|(1<<pb2);
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);

    execute(0x09,0xFF); //decode=0
    execute(0x0B,0x07);  //nmr of displays=8
    execute(0x0C,0x01); // turn on screans
    execute(0x0A,0x05); //intensity
}

void setup_interrupts() {
    cli();
    PCICR |= (1 << PCIE2);
    PCMSK2 |= 0xFF;
    sei();
}


int main(void) {

    DDRD = 0;
    PORTD = 0xFF; // Aktivera pull-up motstånd på knapparna



    spi_init();
    ADC_init();
    setup_interrupts();

    while (1) {
{
            
        }
        while (function == 1) {
            get_random_decimal();
        }
        while (function == 2) {
            // Counter
        }
        while (function == 3) {
            // Settings
        }
        while (function == 4) {
            function = 0; // Reset
        }
    }
}



#define F_CPU 16000000
#include <avr/io.h>
#include <stdint.h>
#include <util/delay.h>

#define pb3 3
#define pb5 5
#define pb2 2

uint8_t mask = 0;
uint8_t mask_dest = 1;
uint8_t mask2 = 0;
uint8_t mask_dest2 = 1;


int clamp(int value, int min, int max)
{
    if (value < min) return max;
    if (value > max) return min;
    return value;
}

void execute(uint8_t cmd,uint8_t data)
{
    PORTB &= ~(1<<pb2);
    
    SPDR = cmd;
    while(!(SPSR & (1<<SPIF)));
    
    SPDR = data;
    while(!(SPSR & (1<<SPIF)));
    
    PORTB |= (1<<pb2);
}

int main(void)
{
    DDRB = (1<<pb3)|(1<<pb5)|(1<<pb2);
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    DDRD = 255;
    
    execute(0x09,0xFF); //decode=0
    
    execute(0x0B,0x07);  //nmr of displays=8
    execute(0x0C,0x01); // turn on screans
    execute(0x0A,0x05); //intensity
    

    
    while (1) 
    {
        //Good Fucc
        PORTD = 255;
        _delay_ms(1000);
        PORTD = 0;
        _delay_ms(1000);
        execute(0x01,2);
        execute(0x02,8);
        execute(0x03,5);
        execute(0x04,0);
        execute(0x05,0);
        execute(0x06,0);
        execute(0x07,0);
        execute(0x08,0);
    }
}

